# Name of your application. Used to uniquely configure containers.
service: comman

# Name of the container image.
image: damianfarina/comman

# Deploy to these servers.
servers:
  web:
    hosts:
      - comman.unibras.com.ar
    # options:
      # publish: "4001:4001"
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: comman.unibras.com.ar

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username:
    - KAMAL_REGISTRY_USER

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - SENDGRID_API_KEY
    - SENDGRID_DOMAIN
    - SENDGRID_FROM_EMAIL
    - SENDGRID_FROM_NAME
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use comman-db for a db accessory server on same machine via local kamal docker network.
    DB_HOST: comman-db
    DB_PORT: 5432
    POSTGRES_USER: comman
    POSTGRES_DB: comman_production
    REVISION_ID: "F1-PPU-6 REV0"
    DEFAULT_COUNTRY: "Argentina"
    DEFAULT_PROVINCE: "Mendoza"

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "comman_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.3.6
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  keys_only: true
  keys: [ "~/.ssh/hetzner_key" ]
#   user: app

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:17
    host: comman.unibras.com.ar
    # Change to 5432 to expose port to the world instead of just local network.
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        POSTGRES_USER: comman
        POSTGRES_DB: comman_production
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
    files:
      - db/production_setup.sql:/docker-entrypoint-initdb.d/setup.sql

  postgres_backup:
    image: kartoza/pg-backup:17-3.5
    host: comman.unibras.com.ar
    env:
      clear:
        POSTGRES_USER: comman
        POSTGRES_DB: comman_production
        POSTGRES_HOST: comman-db
        POSTGRES_PORT: 5432
        REMOVE_BEFORE: 30
        CRON_SCHEDULE: "0 5 * * *" # run at 5am (host time)
      secret:
        - POSTGRES_PASS
    directories:
      - backups:/backups
